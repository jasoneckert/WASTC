NETWORK INTERFACES & SERVICES
   * Open a Terminal on your Fedora Workstation virtual machine as root
   
  ifconfig (note the IP address you received from DHCP)
  ip addr show
  nmcli conn show  
  cat /etc/NetworkManager/system-connections (note that the folder is empty)
  
  * Log into GNOME desktop as the woot user and navigate to Activities > Show Applications > Settings > Network 
  * Next, modify your network interface to use a static configuration for your network and Apply your changes. 
  
  ls /etc/NetworkManager/system-connections (note the name.nmconnection file)
  cat /etc/NetworkManager/system-connections/name.nmconnection 
  nmcli connection down "name" ; nmcli connection up "name"
  nmcli conn show  
  ifconfig (note the new IP address for future exercises)
  ip addr show
  ping -c 5 www.yahoo.ca 
  hostnamectl set-hostname fedoraworkstation 
  hostname
  cat /etc/hostname
  bash (new shells will indicate the new hostname)
  cat /etc/resolv.conf (note the redirection to Systemd-resolved)
  resolvectl status
  vi /etc/hosts	(add the line below)
     1.2.3.4  fakehost.fakedomain.com  fakehost
  host fakehost.fakedomain.com
  resolvectl query fakehost.fakedomain.com 
  nslookup fakehost.fakedomain.com
  dig fakehost.fakedomain.com
  host www.yahoo.ca
  resolvectl query www.yahoo.ca
  nslookup www.yahoo.ca
  dig www.yahoo.ca
  ip route (note the two routes for your network and gateway)
  traceroute www.yahoo.ca
  tracepath www.yahoo.ca
  mtr www.yahoo.ca (press q to quit)
  grep -i HTTP /etc/services | less
  nmap -sT localhost (note the default services started, and the ports they listen on)
  dnf install telnet-server telnet
  systemctl start telnet.socket ; systemctl enable telnet.socket
  nmap -sT localhost (note the telnet service listening to port 23/tcp, on demand)
  telnet localhost (log in as the root user)
  who (note that you are logged in remotely via a pseudo terminal, pts/0)
  ss -t (note the established telnet socket on your system – after initially connecting on port 23/tcp, communication is redirected to a random port above 32768 for the session duration)
  exit (quits your telnet session to localhost)
  who (note that your pseudo terminal is no longer present)
  ss -t (note that your telnet socket is no longer present)

   * Open a Terminal on your Ubuntu Server virtual machine as root
  
  ifconfig (note the DHCP address assigned for future exercises)
  ip addr show
  networkctl
  cat /etc/netplan/00-installer-config.yaml
  hostname
  cat /etc/hostname
  ping -c 5 www.yahoo.ca
  nmap -sT localhost (we’ll be adding several additional services later)

SSH
   * Open a Terminal on your Fedora Workstation virtual machine as root
  
  ssh woot@UbuntuIPaddress (accept the SSH host key and supply the woot user’s password when prompted)
     su - (supply the root user’s password when prompted)
     who (note that you are connected via a remote pseudo terminal session) 
     exit
  ssh-keygen (press Enter at each prompt to use default settings)
  ssh-copy-id -i woot@UbuntuIPaddress
  ssh woot@UbuntuIPaddress (note that you are not prompted to supply a password!)
     exit
  ssh woot@UbuntuIPaddress cat /etc/hosts > downloadedhosts 
  cat downloadedhosts

  * If your host OS is Windows, download and install the Putty Windows SSH client (putty.exe) from the following website: http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html. 
  * Next, run the putty.exe executable and connect to the IP address of your Ubuntu Server using SSH on port 22. Accept the SSH host key and log in as the woot user. 
  
     who
     exit
     
  * If your host OS is macOS, navigate to Applications > Utilities > Terminal to open a shell on your local system. 
  
    ssh woot@UbuntuIPaddress (accept the SSH host key and supply woot’s password when prompted)
    who
    exit
    
FTP
   * Open a Terminal on your Ubuntu Server virtual machine as root
   
   apt install vsftpd 
   cp -f /etc/hosts ~woot/file1 
   cp -f /etc/hosts ~woot/file2 
   cp -f /etc/hosts /srv/ftp/file3 
   vi /etc/vsftpd.conf (view the comments and ensure the following lines are uncommented, saving your changes)
      anonymous_enable=YES 
      write_enable=YES
   systemctl restart vsftpd.service 
   
   * Open a Terminal on your Fedora Workstation virtual machine as root
 
   ftp UbuntuIPaddress (log in as the woot user when prompted)
      dir (note that file1 and file2 are present)
      lcd /etc (changes the directory on Fedora to /etc)
      put hosts (uploads the hosts file to woot’s home directory on the Ubuntu server)
      dir 
      lcd / (changes the directory on Fedora to /)
      get hosts (downloads the hosts file from the Ubuntu server to / on Fedora)
      mget file* (press y when prompted to download the file1 and file2)
      help 
      bye
  
   ls / (note that hosts, file1, and file2 were downloaded successfully)
   ftp UbuntuIPaddress (log in as the anonymous user when prompted)
     dir (note that file3 is present)
     lcd /
     get file3
     put file2 (note that you receive a permission error!)
     bye 

   * On your Windows or macOS host OS, open a Web browser and navigate to ftp://UbuntuIPaddress and note that you can see and download file3. 
   * On your Windows or macOS PC, download and install the FileZilla FTP client program from https://filezilla-project.org/. 
   * Next, open FileZilla and connect to sftp://UbuntuIPaddress as the woot user and practice some graphical file transfers. 
   
NFS
   * Open a Terminal on your Ubuntu Server virtual machine as root
 
  apt install nfs-kernel-server 
  vi /etc/exports (add the following line, saving your changes)
     /etc *(rw) 
  exportfs -a 
  systemctl restart nfs-kernel-server 
  showmount –e localhost 
  mount –t nfs localhost:/etc /mnt 
  df -hT
  cat /mnt/hosts (note that you are viewing /etc/hosts on the remote system via NFS)
  umount /mnt 

   * Open a Terminal on your Fedora Workstation virtual machine as root

  dnf install nfs-utils (this installs the NFS client utilities if not already installed)
  mount –t nfs IPaddress:/etc /mnt (where IPaddress is your Ubuntu Server IP address)
  df -hT 
  ls /mnt
  cat /mnt/hosts
  umount /mnt 

  dnf install sshfs (SSHFS is an NFS-like implementation using SSH)
  sshfs woot@IPaddress:/etc /mnt (where IPaddress is your Ubuntu Server IP address)
  df -hT
  ls /mnt
  cat /mnt/hosts 
  umount /mnt

SAMBA
   * Open a Terminal on your Ubuntu Server virtual machine as root
 
  apt install samba smbclient cifs-utils
  ps –ef | grep mbd (note that smbd and nmbd are running)

  vi /etc/samba/smb.conf 
     * View the comments and then add the following line under the workgroup = WORKGROUP line
     netbios name = ubuntu

     * Uncomment/modify the section that shares out all home directories:
     [homes]
       comment = Home Directories
       browseable = yes
       read only = no

     * Add the following share definition to the bottom of the file, saving your changes:
     [etc]
       comment = The etc directory
       path = /etc
       guest ok = yes
       read only = yes
       browseable = yes

  testparm (if you made an error, re-edit the /etc/samba/smb.conf file to fix it)
  systemctl restart smbd.service ; systemctl restart nmbd.service 
  smbpasswd –a root (supply Secret555 when prompted)
  smbpasswd –a woot (supply Secret555 when prompted)
  pdbedit –L (note that both root and woot have Samba passwords)
  nmblookup ubuntu (note that your NetBIOS name resolves to your IP address)
  smbclient –L ubuntu (note your shares shown, including the root home directory)
  mount –t cifs //ubuntu/root /mnt
  df -hT
  ls -a /mnt (note your home directory contents)

  * If your host OS is Windows, open File Explorer and enter \\ubuntu in the search bar. Next, open PowerShell as Administrator and run the following command
  
  net use z: \\ubuntu\woot /user:woot Secret555 (access your Z:\ mapped drive afterwards in File Explorer)

  * If your host OS is macOS, open the Finder app and navigate to Go > Connect to Server and enter smb://ubuntu and click Connect (note the connection in your Finder)

APACHE
   * Open a Terminal on your Ubuntu Server virtual machine as root
   
  apt install apache2
  systemctl enable apache2.service
  systemctl status apache2.service
  ps -ef | grep apache (note that additional Apache daemons run as www-data)
  grep RUN /etc/apache2/envvars (note that the default user and group are www-data)
  grep ^User /etc/apache2/apache2.conf
  grep ^Group /etc/apache2/apache2.conf  

  grep LOG /etc/apache2/envvars (note that logs are stored in /var/log/apache2)
  grep ErrorLog /etc/apache2/apache2.conf  
  grep LogLevel /etc/apache2/apache2.conf
  cat /var/log/apache/error.log

  grep LogFormat /etc/apache2/apache2.conf (note the log formats defined)
  ls -l /etc/apache2/sites-enabled (note the symlink to ../sites-available/000-default.conf)
  less /etc/apache2/sites-available/000-default.conf (note the default virtual host that listens for HTTP requests on port 80 and serves Web content from the /var/www/html document root directory, logging each hit to access.log using a combined log format)
  less /etc/apache2/apache2.conf (note the <Directory /> and <Directory /var/www/> block directives that deny access to / and allow access to /var/www/ and its subdirectories)
  less /var/www/html/index.html 
  curl http://localhost | less (note the same HTML webpage)

  * Open a Web browser on your Windows or macOS PC and navigate to http://UbuntuIPaddress to view your webpage
  * Next, run the following commands

  ls -l /var/www/html/index.html (note the owner/group = root, and the mode = 644)
  chmod 640 /var/www/html/index.html

  * Refresh the webpage in your Web browser and note the Forbidden (HTTP 403) error 
  * Next, run the following command
  
  chgrp www-data /var/www/html/index.html

  * Refresh the webpage in your Web browser and note the webpage displays properly. 
  * Next, run the following commands
  
  cat /var/log/apache2/access.log 
  vi /etc/apache2/sites-available/000-default.conf 
  
  
  
  . Change combined to referer at the end of the CustomLog line, save your changes and quit the vi editor. Next, run the apachectl configtest command to check for syntax errors, and then run the apachectl graceful command to restart the Apache daemons.
6. Refresh the webpage in your Web browser five times. Next, run the cat /var/log/apache2/access.log command, noting that the last 5 lines only log the requested resource (index.html).

7. Run the ab -n 1000 -c 100 http://localhost/ command to test the responsiveness of your Apache server.

8. Run the useradd –m shrek command to create the shrek user. Next, run the mkdir /home/shrek/public_html command to create a Web content folder for shrek. Next, create a new /home/shrek/public_html/index.html file using the vi editor with the following contents (save and quit the vi editor when finished):
  <html>
      <body>
          <h1> Welcome to Shreks Homepage! </h1>
      </body>
  </html>

9. Run the cat /etc/apache2/mods-available/userdir.conf command, noting the lines that allow Apache to enter the public_html folder under everyone’s home directory, except for the root user). Next, run the following commands:
  ls -l /etc/apache2/mods-enabled (note the absence of a shortcut to userdir.conf)
  a2enmod userdir
  systemctl restart apache2.service
  ls -l /etc/apache2/mods-enabled (note the shortcut to userdir.conf)

10. Open a Web browser on your Windows or macOS PC and navigate to http://UbuntuIPaddress/~shrek/ to view shrek’s webpage.

11. Edit the /etc/apache2/apache2.conf file using the vi editor and add the following line to the end of the file (save and quit the vi editor when finished):
  alias /donkey/  /home/shrek/public_html/

12. Run the apachectl graceful command. Next, open a Web browser on your Windows or macOS PC and navigate to http://UbuntuIPaddress/donkey/ to view shrek’s webpage.

13. Run the mkdir /var/www/html2 command to create another document root directory under /var/www/. Next, create a new /var/www/html2/index.html file using the vi editor with the following contents (save and quit the vi editor when finished):
  <html>
      <body>
          <h1> It works! </h1>
      </body>
  </html>

14. Edit the /etc/apache2/sites-available/000-default.conf file using the vi editor. Uncomment the line that says ServerName www.example.com to assign a sample host name to your first virtual host. Next, add the following lines to the end of the file to add another virtual host with a different document root directory (save and quit the vi editor when finished):
  <VirtualHost *:80>
      ServerName www.example2.com
      ServerAdmin webmaster@localhost
      DocumentRoot /var/www/html2
      ErrorLog ${APACHE_LOG_DIR}/error.log
      CustomLog ${APACHE_LOG_DIR}/access.log referer
  </VirtualHost>

15. Run the systemctl restart apache2.service command to restart Apache.

16. If you have a Windows PC, add the following line to the bottom of the C:\Windows\System32\drivers\etc\hosts file to perform local name resolution for the two sample host names used in Step 14. If you have a macOS PC, add this same line to the bottom of your /etc/hosts file (sudo /etc/hosts): 
  UbuntuIPaddress www.example.com www.example2.com

17. Open a Web browser on your Windows or macOS PC and navigate to http://www.example.com to view the webpage from /var/www/html/. Next, navigate to http://www.example2.com to view the webpage from /var/www/html2/.

 
18. Create a new /usr/lib/cgi-bin/hello.pl Perl script using the vi editor with the following contents (save and quit the vi editor when finished):
  #!/usr/bin/perl
  print "Content-type: text/html \n\n";
  print <<"EOF";
  <html>
  <body>
  <h1> Hello World!</h1>
  </body>
  </html>
  EOF

19. Run the chmod 755 /usr/lib/cgi-bin/hello.pl command. Next, run a2enmod cgid (to enable the CGI module) followed by systemctl restart apache2.service.  

20. Open a Web browser on your Windows or macOS PC and navigate to http://www.example.com/cgi-bin/hello.pl to execute your Perl script.

21. Run the openssl s_client -connect localhost:443 and note the error. Next, run openssl s_client -connect localhost:9090 to connect to Cockpit using HTTPS and note that you are successful via a self-signed certificate.

WORDPRESS
   * Open a Terminal on your Fedora Workstation virtual machine as root
POSTGRESQL
   * Open a Terminal on your Fedora Workstation virtual machine as root
DNS
   * Open a Terminal on your Fedora Workstation virtual machine as root
DHCP
   * Open a Terminal on your Fedora Workstation virtual machine as root
NTP
   * Open a Terminal on your Fedora Workstation virtual machine as root
SECURITY BASICS
   * Open a Terminal on your Fedora Workstation virtual machine as root
FIREWALLS
   * Open a Terminal on your Fedora Workstation virtual machine as root
SECURITY SERVICES (SELINUX & APPARMOR)
   * Open a Terminal on your Fedora Workstation virtual machine as root
